1. IO와 스트림(Stream)

    1) IO?
    - Input(입력) : 프로그램에 데이터가 들어오는 것.
    - Output(출력) : 프로그램의 데이터가 나가는 것.

    2) 스트림?
        : 데이터의 흐름.

        특징)
            - 단방향이다.
            - FIFO(First In First Out) 구조를 갖고 있다.
            - 출력단위에 따라 바이트 기반과 문자단위로 분류된다.
                > 출력단위 :    1byte -> 바이트 기반 스트림.
                                문자  -> 문자 기반 스트림.

2. 바이트 기반 스트림
    : 바이트 단위로 데이터를 입출력하는 스트림.

    1) 바이트 기반 스트림
        - InputStream -> read메서드 사용.
        - OutputStream -> write메서드 사용.

        -> 입력과 출력에 따라, read() 와 write()를 구현하여 사용한다.

    2) 바이트 기반 스트림의 종류
        - '파일'대상        : FileInputStream / FileOutputStream
        - '메모리'대상      : PipedInputStream / PipedOutputStream
        - '오디오'대상      : AudioInputStream / AudioOutputStream(자동완성 안됨.)
        - '프로세스'대상    : ByteArrayInputStream / ByteArrayOutputStream
                    
        -> 데이터를 읽거나 쓰는 대상에 따라서 적절한 스트림을 사용한다.

    3) 바이트 기반 스트림의 활용
        ex)
            FileInputStream fis = null;
            fis = new FileInputStream("파일위치");
            fis.read();
            
3. 바이트 보조 기반 스트림
    : 바이트 기반 보조스트림은 실제 바이트 기반 스트림의 성능을 향상시키는 역할을 한다.

    1) 바이트 보조 기반 스트림의 종류
    - '필터'를 이용한 입출력         : FilterInputStream / FilterOutputStream
    - '버퍼'를 이용한 입출력         : BufferedInputStream / BufferedOutputStream
    - '기본 단위'로 데이터 처리      : DataInputStream / DataOutputStream
    - print, printf, println 사용   :       x        / PrintStream   

    2) 바이트 보조 기반 스트림의 활용
        ex)
            FileInputStream fis = null;
            fis = new FileInputStream("파일위치");
            BufferedInputStream bis = new BufferedInputStream(fis);

----------------------------------------------------------------------------------------------

4. 문자 기반 스트림
    : 16bit의 문자나 문자열을 읽고 쓰는 스트림

    1) 문자 기반 스트림
        : 자바에서 사용하는  char형 변수는 2byte이므로 바이트 기반 스트림은 불편하므로,
        문자 단위로 입출력을 다루는 문자 기반 스트림을 제공.
        
        - Reader    -> read()
        - Writer    -> write()

     2) 문자 기반 스트림의 종류
        - '파일'대상        : FileReader / FileWriter
        - '메모리'대상      : PipedReader / PipedWriter
        - '프로세스'대상    : CharArrayReader / CharArrayWriter

    3) 문자 기반 스트림의 활용
        ex)
            FileReader fr = null;
            fr = new FileReader("파일 경로");

5. 문자 기반 보조 스트림
    : 문자 기반 스트림의 성능을 향상시키는 역할

    1) 문자 보조 기반 스트림의 종류
    - '필터'를 이용한 입출력         : FilterReader / FilterWriter
    - '버퍼'를 이용한 입출력         : BufferedReader / BufferedWriter

    2) 문자 보조 기반 스트림의 활용
        ex)
            FileReader fr = null;
            fr = new FileReader("파일 경로");
            BufferedReader br = new BufferedReader(fr);


